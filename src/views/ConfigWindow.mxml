<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" maximizable="false" minimizable="false"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="475" height="330" resizable="false"
		  creationComplete="onCreationComplete()" systemChrome="none" transparent="true"
		  showStatusBar="false" title="Configuration - Warfish Notifier" backgroundColor="#000000" backgroundAlpha="0"
		  xmlns:mate="http://mate.asfusion.com/">
	
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.ioc.InjectorRegistry;
			
			import events.ConfigEvent;
			import events.SoundManagerEvent;
			import events.UpdateManagerEvent;
			
			import flash.events.MouseEvent;
			
			import managers.UpdateManager;
			
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			
			import vo.WarfishConfig;
			
			[Bindable] public var warfishConfig:WarfishConfig;
			[Bindable] private var sounds:ArrayList;
			public var updateManager:UpdateManager;
			
			private var _updateBtnLbl:String;
			
			public function set updateBtnLbl(value:String):void{
				_updateBtnLbl = value;
				dispatchEvent(new Event("ValueChanged"));
			}
			
			[Bindable (Event="ValueChanged")]
			public function get updateBtnLbl():String{
				if (_updateBtnLbl == 'No update available'){
					btn_checkForUpdate.enabled = false;
				} else {
					btn_checkForUpdate.enabled = true;
				}
				cursorManager.removeBusyCursor();
				return _updateBtnLbl; 
			}
			
			private function onCreationComplete():void{
				InjectorRegistry.register(this);
				
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				startOnLoginCbox.selected = warfishConfig.startOnLogin;
				delaySlider.value = warfishConfig.bubbleInterval / 60000;
				alertColorPicker.selectedColor = warfishConfig.alertColor;
				blinkIconCbox.selected = warfishConfig.blinkIconOnTurn;
				
				panel.moveArea.addEventListener(MouseEvent.MOUSE_DOWN,startMove);
				
				updateBtnLbl = "Check for Update";
				sounds = new ArrayList(warfishConfig.sounds)
			}
			
			private function checkForUpdate():void{
				cursorManager.setBusyCursor();
				dispatcher.dispatchEvent(new UpdateManagerEvent(UpdateManagerEvent.CHECK_FOR_UPDATE_MANUAL));
			}
			
			protected function btn_saveSettings_clickHandler(event:Event):void{
				warfishConfig.rssURL = ti_rssURL.text;
				warfishConfig.startOnLogin = startOnLoginCbox.selected;
				try {
					NativeApplication.nativeApplication.startAtLogin = startOnLoginCbox.selected;
				} catch (e:Error) {}
				warfishConfig.bubbleInterval = delaySlider.value * 60000;
				warfishConfig.alertColor = alertColorPicker.selectedColor;
				warfishConfig.blinkIconOnTurn = blinkIconCbox.selected;
				dispatcher.dispatchEvent(new ConfigEvent(ConfigEvent.CONFIG_WINDOW_CLOSED));
				this.close();
			}

			protected function startMove(event:MouseEvent):void
			{
				stage.nativeWindow.startMove();
			}

		]]>
	</fx:Script>
	
	<s:TitleWindow id="panel" left="15" title="Configuration" width="450" height="300" alpha="0.9" top="10" close="this.close()">
		<s:layout>
			<s:VerticalLayout horizontalAlign="left" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
		</s:layout>
		
		<mx:Form width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:FormItem label="RSS URL" width="100%" color="#000000">
				<s:TextInput id="ti_rssURL" width="100%" text="{warfishConfig.rssURL}" enter="btn_saveSettings_clickHandler(event)" color="#000000"/>
			</mx:FormItem>
			<mx:FormItem label="Alert Color" width="100%" color="#000000">
				<mx:ColorPicker id="alertColorPicker" />
			</mx:FormItem>
			<mx:FormItem color="#000000" width="100%">
				<s:CheckBox id="startOnLoginCbox" label="Start on login"/>
			</mx:FormItem>
			<mx:FormItem label="Alert every {delaySlider.value.toString()} minutes" width="100%" color="#000000">
				<s:HSlider id="delaySlider" width="100%" minimum="1" maximum="30" />
			</mx:FormItem>
			<mx:FormItem width="100%" color="#000000">
				<s:CheckBox id="blinkIconCbox" label="Blink Tray / Dock Icon" />
			</mx:FormItem>
			<mx:FormItem label="Alert Sound" width="100%" color="#000000" direction="horizontal">
				<s:ComboBox id="cmb_soundSelect" dataProvider="{sounds}"/>
				<s:Button label="Manage Sounds" click="dispatcher.dispatchEvent(new SoundManagerEvent(SoundManagerEvent.OPEN_SOUND_MANAGER_WINDOW));" />
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:Button id="btn_checkForUpdate" label="{updateBtnLbl}" click="checkForUpdate()" />
			</mx:FormItem>
		</mx:Form>
		<s:HGroup width="100%">
			<s:Button id="btn_saveSettings" label="Save Settings" click="btn_saveSettings_clickHandler(event)" />
			<s:Button label="Cancel" click="this.close()"/>
		</s:HGroup>
	</s:TitleWindow>
	<fx:Declarations>
		<mate:Dispatcher id="dispatcher"/>
	</fx:Declarations>
</s:Window>
