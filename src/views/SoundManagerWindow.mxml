<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="431" height="285" showStatusBar="false" maximizable="false" minimizable="false"
		  systemChrome="none" transparent="true" backgroundColor="#000000" backgroundAlpha="0"
		  creationComplete="onCreationComplete()" xmlns:mate="http://mate.asfusion.com/"
		  title="Sound Manager - Warfish Turn Notifier">	
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.ioc.InjectorRegistry;
			
			import events.AnalyticsEvent;
			import events.ConfigEvent;
			import events.SoundManagerEvent;
			
			import vo.AlertSound;
			import vo.Config;
			
			[Bindable] private var sounds:Array;
			private var _config:Config;
			
			public function set config(value:Config):void{
				_config = value;
				dispatchEvent(new Event("configChanged"));
				soundsDG.data = sounds = config.sounds;
				for (var i:int = 0; i < sounds.length; i++){
					if (sounds[i].isSelected){
						soundsDG.selectedIndex = i;
						break;
					}
				}
			}
			
			[Bindable (event="configChanged")]
			public function get config():Config{
				return _config;
			}
			
			private function onCreationComplete():void{
				InjectorRegistry.register(this);
				
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				
				tw.moveArea.addEventListener(MouseEvent.MOUSE_DOWN,startMove);
				
				useDefaultSoundCBox.selected = config.playDefaultSound;
			}
			
			private function startMove(event:MouseEvent):void{
				stage.nativeWindow.startMove();
			}
			
			private function addSound():void{
				var file:File = new File();
				var fileFilter:FileFilter = new FileFilter("mp3","*.mp3");
				file.browseForOpen("Select MP3",[fileFilter]);
				file.addEventListener(Event.SELECT,onFileSelect);
				
				var e:AnalyticsEvent = new AnalyticsEvent(AnalyticsEvent.TRACK_CLICK);
				e.action = 'Add Sound';
				dispatcher.dispatchEvent(e);
			}
			
			private function onFileSelect(event:Event):void{
				var original:File = event.target as File;
				var copy:File = File.applicationStorageDirectory.resolvePath(original.name);
				original.addEventListener(Event.COMPLETE,onCopyComplete);
				original.copyToAsync(copy,true);
				
				var e:AnalyticsEvent = new AnalyticsEvent(AnalyticsEvent.TRACK_CLICK);
				e.action = 'Sound added: ' + original.name;
				dispatcher.dispatchEvent(e);
			}
			
			private function onCopyComplete(event:Event):void{
				unselectAllSounds();
				var file:File = event.target as File;
				var alertSound:AlertSound = new AlertSound();
				alertSound.file_name = File.applicationStorageDirectory.resolvePath(file.name).nativePath;
				alertSound.pretty_name = file.name.replace('.mp3','');
				alertSound.isSelected = true;
				var e:SoundManagerEvent = new SoundManagerEvent(SoundManagerEvent.ADD_ALERT_SOUND);
				e.alertSound = alertSound;
				dispatcher.dispatchEvent(e);
			}
			
			private function deleteSound():void{
				var alertSoundIndex:int = soundsDG.selectedIndex;
				if (alertSoundIndex >= 0){
					var tempArray:Array = new Array();
					var selectedDeleted:Boolean = false;
					for (var i:int = 0;i < sounds.length; i++){
						if (i != alertSoundIndex){
							tempArray.push(sounds[i]);
						} else {
							deleteSoundFile(sounds[i].file_name);
							if (sounds[i].isSelected){
								selectedDeleted = true;
							}
						}
					}
					if (selectedDeleted && tempArray.length){
						tempArray[0].isSelected = true;
					}
					sounds = tempArray;
					var e:SoundManagerEvent = new SoundManagerEvent(SoundManagerEvent.SAVE_SOUNDS);
					e.sounds = sounds;
					dispatcher.dispatchEvent(e);
					
					if (!sounds.length){
						useDefaultSoundCBox.selected = true;
						useDefaultSoundCBox.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					}
				}
			}
			
			private function deleteSoundFile(filePath:String):void{
				var file:File = new File(filePath);
				file.deleteFile();
			}
			
			private function onCBoxClick():void{
				config.playDefaultSound = useDefaultSoundCBox.selected;
				var e:AnalyticsEvent = new AnalyticsEvent(AnalyticsEvent.TRACK_CLICK);
				e.action = 'Default Sound ' + useDefaultSoundCBox.selected ? 'selected' : 'deselected';
				dispatcher.dispatchEvent(e);
			}
			
			private function closeWindow():void{
				if (!useDefaultSoundCBox.selected && !sounds.length){
					useDefaultSoundCBox.selected = true;
					useDefaultSoundCBox.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				}				
				var e:ConfigEvent = new ConfigEvent(ConfigEvent.SAVE_CONFIG);
				e.config = config;
				dispatcher.dispatchEvent(e);
				this.close();
			}
			
			private function onItemClick():void{
				if (!useDefaultSoundCBox.selected){
					unselectAllSounds();
					sounds[soundsDG.selectedIndex].isSelected = true;
					var e:SoundManagerEvent = new SoundManagerEvent(SoundManagerEvent.SAVE_SOUNDS);
					e.sounds = sounds;
					dispatcher.dispatchEvent(e);
				}
			}
			
			private function unselectAllSounds():void{
				for (var i:int = 0;i < sounds.length; i++){
					sounds[i].isSelected = false;
				}
			}
		]]>
	</fx:Script>
	
	<s:TitleWindow id="tw" left="15" title="Sound Manager" width="400" height="250" top="10" alpha="0.9" close="closeWindow()">
		<s:layout>
			<s:VerticalLayout horizontalAlign="left" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
		</s:layout>
		<mx:DataGrid id="soundsDG" width="100%" height="100%" dataProvider="{sounds}" enabled="{!useDefaultSoundCBox.selected}"
					 itemClick="onItemClick()">
			<mx:columns>
				<mx:DataGridColumn headerText="File" dataField="pretty_name"/>
			</mx:columns>
		</mx:DataGrid>
		<s:HGroup horizontalAlign="right" width="100%">
			<s:CheckBox label="Use Default Sound" id="useDefaultSoundCBox" click="onCBoxClick()" />
			<mx:Spacer width="100%" />
			<s:Button label="Add" click="addSound()" enabled="{!useDefaultSoundCBox.selected}" />
			<s:Button label="Delete" click="deleteSound()" enabled="{!useDefaultSoundCBox.selected}" />
			<s:Button label="Done" click="closeWindow()" />
		</s:HGroup>
	</s:TitleWindow>
	
	<fx:Declarations>
		<mate:Dispatcher id="dispatcher"/>
	</fx:Declarations>
</s:Window>
